#include "auto_buffer.h"
#include "crypto_xor.h"

#define XOR_OFFSET 30

const uint8_t CryptoXOR::key_table_[256] =
{
	0xFC, 0xDE, 0xAB, 0x5A, 0xBA, 0x45, 0xCF, 0x1E,
	0x4D, 0x61, 0xB3, 0xC2, 0x73, 0x82, 0x6C, 0xBD,
	0x8C, 0x06, 0xA0, 0xA9, 0x19, 0xF4, 0x4E, 0xB2,
	0xEF, 0xA6, 0x34, 0x6B, 0xE0, 0x38, 0x7C, 0x7A,
	0x0D, 0x28, 0xE7, 0x10, 0x66, 0x01, 0x50, 0xD4,
	0xF5, 0x17, 0x52, 0x2C, 0xCD, 0x9E, 0x3D, 0xDA,
	0x8B, 0x0E, 0x85, 0xC4, 0x65, 0x14, 0x39, 0x4A,
	0xDD, 0xBB, 0x1F, 0x18, 0x2D, 0x37, 0x29, 0xD3,
	0x92, 0x62, 0xAE, 0x79, 0x57, 0x2F, 0x0A, 0xD2,
	0x08, 0x03, 0x49, 0x0F, 0xCE, 0xB4, 0x8F, 0xE8,
	0x56, 0x11, 0x5B, 0x3B, 0x30, 0x7D, 0xA5, 0xED,
	0x3C, 0x89, 0x15, 0x98, 0x05, 0xD1, 0x9A, 0x26,
	0x87, 0x48, 0x41, 0x12, 0x1D, 0x75, 0x32, 0x1C,
	0xAC, 0x09, 0xFB, 0x77, 0xB9, 0xC1, 0x72, 0x71,
	0xF1, 0xEA, 0xC6, 0x4C, 0x1B, 0x7E, 0x13, 0x86,
	0x4B, 0x91, 0x33, 0x5E, 0x58, 0xEB, 0xD8, 0x93,
	0xF7, 0xD7, 0x6F, 0xDC, 0xC7, 0x04, 0xFF, 0xE9,
	0xCB, 0xB6, 0xF3, 0x36, 0xF9, 0xB5, 0x88, 0x2B,
	0x5C, 0x2E, 0x76, 0x95, 0xCA, 0x97, 0x2C, 0x2A,
	0x54, 0x74, 0xF8, 0x35, 0x3F, 0x9C, 0xAD, 0x16,
	0x9D, 0xB0, 0x83, 0xE1, 0x42, 0xB7, 0xC3, 0xFA,
	0xB1, 0xE4, 0x63, 0x51, 0x8E, 0x44, 0x21, 0x8A,
	0x53, 0xAF, 0x67, 0x43, 0xF2, 0xA2, 0xFE, 0xD9,
	0x5D, 0xD5, 0xD0, 0x8D, 0x23, 0x46, 0xBF, 0x96,
	0x25, 0x70, 0x80, 0x68, 0xA3, 0x90, 0xF0, 0x20,
	0xC8, 0xCC, 0x94, 0x02, 0xDF, 0x99, 0x84, 0x9F,
	0xC5, 0x7B, 0xBC, 0xAA, 0xA4, 0x0B, 0xEC, 0xFD,
	0x5F, 0xA8, 0xB8, 0x1A, 0x0C, 0x47, 0xDB, 0xC9,
	0x81, 0x24, 0xBE, 0xE5, 0xA1, 0x78, 0x64, 0x69,
	0x6D, 0xF6, 0x59, 0x3A, 0xC0, 0x4F, 0xD6, 0x27,
	0x7F, 0xE2, 0x22, 0xA7, 0x9B, 0xEE, 0xE6, 0x60,
	0x07, 0x3E, 0x40, 0xE3, 0x6E, 0x6A, 0x55, 0x31
};

size_t CryptoXOR::Encode(uint8_t* data, size_t data_len, uint8_t key)
{
	for (uint32_t i = 0; i < data_len; i++)
	{
		data[i] += key_table_[key];
		data[i] ^= key_table_[(key + XOR_OFFSET) % 255];
		key ^= i;
	}
	return data_len;
}

size_t CryptoXOR::Decode(uint8_t* data, size_t data_len, uint8_t key)
{
	for (uint32_t i = 0; i < data_len; i++)
	{
		data[i] ^= key_table_[(key + XOR_OFFSET) % 255];
		data[i] -= key_table_[key];
		key ^= i;
	}
	return data_len;
}

size_t CryptoXOR::Encode(AutoBuffer& auto_buf, uint8_t key)
{
	char* buf = auto_buf;
	uint32_t buf_size = auto_buf.GetSize();
	return Encode((uint8_t*)buf, buf_size, key);
}

size_t CryptoXOR::Decode(AutoBuffer& auto_buf, uint8_t key)
{
	char* buf = auto_buf;
	uint32_t buf_size = auto_buf.GetSize();
	return Decode((uint8_t*)buf, buf_size, key);
}

uint8_t* CryptoXOR::EncodeTo(const uint8_t* data, size_t data_len, uint8_t key)
{
	uint8_t* target = new uint8_t[data_len];

	if (!target)
		return 0;

	for (uint32_t i = 0; i < data_len; i++)
	{
		target[i] = data[i] + key_table_[key];
		target[i] ^= key_table_[(key + XOR_OFFSET) % 255];
		key ^= i;
	}

	return target;
}

uint8_t* CryptoXOR::DecodeFrom(const uint8_t* data, size_t data_len, uint8_t key)
{
	uint8_t* target = new uint8_t[data_len];

	if (!target)
		return 0;

	for (uint32_t i = 0; i < data_len; i++)
	{
		target[i] = data[i] ^ key_table_[(key + XOR_OFFSET) % 255];
		target[i] -= key_table_[key];
		key ^= i;
	}

	return target;
}