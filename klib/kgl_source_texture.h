/**************************************************************************************************************************
Copyright(C) 2014-2017 www.xionggf.com

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
modify, merge, publish, distribute,sublicense, and/or sell copies of the Software, and to permit persons to whom the 
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the 
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
**************************************************************************************************************************/
/*!
* \file kgl_source_texture.h
* \date 2017/12/31 13:57
*
* \author www.xionggf.com
* Contact: sun_of_lover@sina.com
*
* \brief 纹理类的基类
*/
#ifndef kgl_source_texture_h__
#define kgl_source_texture_h__

#include "kgl_texture.h"

namespace kgl
{
    class SourceTexture : public Texture
    {
    public:
        /// <summary>
        /// 构造函数，创建一个 <see cref="SourceTexture"/> 类的对象实例时被调用.
        /// </summary>
        SourceTexture();

        /// <summary>
        /// 析构函数，删除一个<see cref="SourceTexture"/>类的对象实例时被调用.
        /// </summary>
        virtual ~SourceTexture();

        virtual void CreateFromFile(const std::string& file_name, const TextureParams& texture_params) override;

        /// <summary>
        /// 根据给定的纹理的宽、高和纹理创建参数结构体，创建出一个source texture实例对象
        /// </summary>
        /// <param name="width">待创建的纹理的宽</param>
        /// <param name="height">待创建的纹理的高</param>
        /// <param name="texture_params">用以创建纹理的纹理创建参数结构体</param>
        virtual void Create(int32_t width, int32_t height, const TextureParams& texture_params) override;

        /// <summary>
        /// 获取纹理的宽
        /// </summary>
        /// <returns>返回本纹理的宽</returns>
        virtual int GetWidth() const override;

        /// <summary>
        /// 获取纹理的宽
        /// </summary>
        /// <returns>返回本纹理的高</returns>
        virtual int GetHeight() const override;
        
        /// <summary>
        /// 查询本纹理是否启用了mipmap
        /// </summary>
        /// <returns>启用了mipmap，返回true，否则返回false</returns>
        virtual bool IsMipmap() const override;

        /// <summary>
        /// 激活并绑定本纹理到OpenGL render pipeline
        /// </summary>
        /// <param name="slot_index">本纹理将会绑定到OpenGL render pipeline中哪个纹理槽位(slot index)</param>
        virtual void ActiveBind(GLuint slot_index) override;

        /// <summary>
        /// Updates the specified x_offset.
        /// </summary>
        /// <param name="x_offset">The x_offset.</param>
        /// <param name="y_offset">The y_offset.</param>
        /// <param name="width">The width.</param>
        /// <param name="height">The height.</param>
        /// <param name="data">The data.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for Update
        void Update(GLint x_offset, GLint y_offset, GLsizei width, GLsizei height, const GLvoid* data);

		void BuildFromNoise(const void* pixels, int32_t width, int32_t height, const TextureParams& tp);
    protected:
        /// <summary>
        /// 创建本纹理时，所用到的纹理创建参数结构体
        /// </summary>
        TextureParams params_;

        /// <summary>
        /// 创建本纹理时，由OpenGL产生的，用以标识本纹理的texture id
        /// </summary>
        GLuint texture_id_ = 0;

        /// <summary>
        /// 本纹理的宽度
        /// </summary>
        int width_ = 0;

        /// <summary>
        /// 本纹理的高度
        /// </summary>
        int height_ = 0;
    };

    typedef std::shared_ptr<SourceTexture> SourceTextureSPtr;
}

#endif // kgl_source_texture_h__